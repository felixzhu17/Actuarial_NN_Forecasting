results$Variable <- as.character(results$Variable)
results$Variable[nrow(results) - 1] <- "Mean"
results$Variable[nrow(results)] <- "Standard Deviation"
colnames(results)[1] <- var
return(results)
}
factor_claim_ratio("year")
factor_claim_ratio <- function(var){
data <- data.frame(Variable = test_set[,var],
Actual = test_set$pure.premium,
Homogenous_Prediction =rep(mean(train_set$pure.premium),nrow(test_set)),
Neural_Network_Prediction = test_pred)
results <- data %>% group_by(Variable) %>% summarise(Homogenous_Claims_Ratio = sum(Actual)/ sum(Homogenous_Prediction), Neural_Network_Claims_Ratio = sum(Actual)/sum(Neural_Network_Prediction))
results <- rbind(results, c(0, mean(results$Homogenous_Claims_Ratio), mean(results$Neural_Network_Claims_Ratio)))
results <- rbind(results, c(0, sd(results$Homogenous_Claims_Ratio), sd(results$Neural_Network_Claims_Ratio)))
results <- round(results,2)
results$Variable <- as.character(results$Variable)
results$Variable[nrow(results) - 1] <- "Mean"
results$Variable[nrow(results)] <- "Standard Deviation"
colnames(results)[1] <- var
return(results)
}
factor_claim_ratio("year")
continuous_claim_ratio <- function(var, bin){
data <- data.frame(Variable = test_set[,var],
Actual = test_set$pure.premium,
Homogenous_Prediction =rep(mean(train_set$pure.premium),nrow(test_set)),
Neural_Network_Prediction = test_pred)
results <- data %>% mutate(Bin = ntile(Variable, bin)) %>% group_by(Bin) %>% summarise(Homogenous_Claims_Ratio = sum(Actual)/ sum(Homogenous_Prediction), Neural_Network_Claims_Ratio = sum(Actual)/sum(Neural_Network_Prediction))
results <- rbind(results, c(0, mean(results$Homogenous_Claims_Ratio), mean(results$Neural_Network_Claims_Ratio)))
results <- rbind(results, c(0, sd(results$Homogenous_Claims_Ratio), sd(results$Neural_Network_Claims_Ratio)))
results <- round(results,2)
results$Bin <- as.character(results$Bin)
results$Bin[nrow(results) - 1] <- "Mean"
results$Bin[nrow(results)] <- "Standard Deviation"
colnames(results)[1] <- var
return(results)
}
factor_claim_ratio("ncd.level")
factor_claim_ratio("business.type_NB")
continuous_claim_ratio("height", 5)
continuous_claim_ratio("prior.claims", 3)
continuous_claim_ratio <- function(var, bin){
data <- data.frame(Variable = test_set[,var],
Actual = test_set$pure.premium,
Homogenous_Prediction =rep(mean(train_set$pure.premium),nrow(test_set)),
Neural_Network_Prediction = test_pred)
results <- data %>% mutate(Bin = ntile(Variable, bin)) %>% group_by(Bin) %>% summarise(Homogenous_Claims_Ratio = sum(Actual)/ sum(Homogenous_Prediction), Neural_Network_Claims_Ratio = sum(Actual)/sum(Neural_Network_Prediction))
results <- rbind(results, c(0, mean(results$Homogenous_Claims_Ratio), mean(results$Neural_Network_Claims_Ratio)))
results <- rbind(results, c(0, sd(results$Homogenous_Claims_Ratio), sd(results$Neural_Network_Claims_Ratio)))
#results <- round(results,2)
results$Bin <- as.character(results$Bin)
results$Bin[nrow(results) - 1] <- "Mean"
results$Bin[nrow(results)] <- "Standard Deviation"
colnames(results)[1] <- var
return(results)
}
factor_claim_ratio <- function(var){
data <- data.frame(Variable = test_set[,var],
Actual = test_set$pure.premium,
Homogenous_Prediction =rep(mean(train_set$pure.premium),nrow(test_set)),
Neural_Network_Prediction = test_pred)
results <- data %>% group_by(Variable) %>% summarise(Homogenous_Claims_Ratio = sum(Actual)/ sum(Homogenous_Prediction), Neural_Network_Claims_Ratio = sum(Actual)/sum(Neural_Network_Prediction))
results <- rbind(results, c(0, mean(results$Homogenous_Claims_Ratio), mean(results$Neural_Network_Claims_Ratio)))
results <- rbind(results, c(0, sd(results$Homogenous_Claims_Ratio), sd(results$Neural_Network_Claims_Ratio)))
#results <- round(results,2)
results$Variable <- as.character(results$Variable)
results$Variable[nrow(results) - 1] <- "Mean"
results$Variable[nrow(results)] <- "Standard Deviation"
colnames(results)[1] <- var
return(results)
}
factor_claim_ratio("business.type_NB")
continuous_claim_ratio("prior.claims", 3)
factor_claim_ratio("prior.claims")
factor_claim_ratio("ncd.level")
continuous_claim_ratio("height", 5)
deviance_results
build_model <- function() {
input  <- layer_input_from_dataset(train_set %>% select(-pure.premium))
spec <- feature_spec(train_set, pure.premium ~ . ) %>%
step_numeric_column(all_numeric()) %>%
fit()
output <- input %>%
layer_dense_features(dense_features(spec)) %>%
layer_dense(units= 60, kernel_regularizer=regularizer_l2(0.1), activation='tanh') %>%
layer_dropout (rate = 0.02) %>%
layer_dense(units= 40, kernel_regularizer=regularizer_l2(0.1), activation='tanh') %>%
layer_dropout (rate = 0.02) %>%
layer_dense(units= 20, kernel_regularizer=regularizer_l2(0.1), activation='tanh') %>%
layer_dropout (rate = 0.02) %>%
layer_dense(units= 10, kernel_regularizer=regularizer_l2(0.1), activation='tanh') %>%
layer_dropout (rate = 0.02) %>%
layer_dense(units= 1 , activation = 'exponential', name='output')
model <- keras_model(input, output)
model %>%
compile(
loss = tweedieloss,
optimizer = 'nadam'
)
model
}
early_stop <- callback_early_stopping(monitor = "val_loss", patience = 20)
model <- build_model()
history <- model %>% fit(
x = train_set %>% select(-pure.premium),
y = train_set$pure.premium,
epochs = 200,
validation_split = 0.1,
verbose = 0,
batch_size = 2000,
callbacks = list(early_stop)
)
plot(history)
factor_claim_ratio("year")
factor_claim_ratio("ncd.level")
factor_claim_ratio("business.type_NB")
continuous_claim_ratio("height", 5)
test_pred <- as.vector(model %>% predict(test_set))
plot_results <- data.frame(Actual = test_set$pure.premium,
Homogenous_Prediction =rep(mean(train_set$pure.premium),nrow(test_set)),
Neural_Network_Prediction = test_pred)
melted_plot <- reshape2::melt(plot_results, id.vars="Actual")
ggplot(melted_plot, aes(x = Actual,y = value, group=variable)) + geom_point(aes(color = variable))+
labs(y = "Predicted Value", x= "Actual Value", color = "Model")
continuous_claim_ratio("prior.claims", 3)
install.packages(  'readr',
'dplyr',
'ggplot2',
'lubridate',
'scales',
'mltools',
'data.table',
'tidyverse',
'broom',
'DMwR',
'caret',
'e1071',
'glmnet',
'ROCR',
'gmodels',
'randomForest',
'rpart',
'rpart.plot',
'gbm',
'class',
'kernlab',
'ada')
install.packages(  'readr',
'ggplot2',
'lubridate',
'scales',
'mltools',
'data.table',
'tidyverse',
'broom',
'DMwR',
'caret',
'e1071',
'glmnet',
'ROCR',
'gmodels',
'randomForest',
'rpart',
'rpart.plot',
'gbm',
'class',
'kernlab',
'ada')
install.packages(  c('readr',
'ggplot2',
'lubridate',
'scales',
'mltools',
'data.table',
'tidyverse',
'broom',
'DMwR',
'caret',
'e1071',
'glmnet',
'ROCR',
'gmodels',
'randomForest',
'rpart',
'rpart.plot',
'gbm',
'class',
'kernlab',
'ada'))
knitr::opts_chunk$set(echo = TRUE)
true <- c(5732, 5947,4629,5199,5334,4593,5932,6215)
other <- c(305,265,418,385,351,418,239,414)
lm(true~other)
true <- c(5732, 5947,4629,5199,5334,4593,5932,6215)
other <- c(305,265,418,385,351,418,239,414)
reg <- lm(true~other)
summary(reg)
true <- c(5732, 5947,4629,5199,5334,4593,5932,6215, 6169, 5554, 874, 832,2709,3493,-942,-1765,1287,1266)
other <- c(305,265,418,385,351,418,239,414,443,495,404,300,464,439,218,356,216,339)
reg <- lm(true~other)
summary(reg)
true <- c(5732, 4629,5199,5334,5932,6215,  5554, 874, 832,2709,3493,-942,-1765,1287,1266)
map <- c(168,247,210,200,160,130,166,514,518,380,335,645,703,487,490)
reg <- lm(true~map)
summary(reg)
true_y <- c(-7114,-5692, -6164, -6676, -8297, -5785, -4468, -6008, -7236, -4990, -5335, -8514, -6538, -8574, -6844)
map_x <- c(305,418,385,351,239,414,495,404,300,464,439,218,356,216,339)
reg <- lm(true_y~map_x)
summary(reg)
reg <- lm(map_x~true_y)
summary(reg)
reg <- lm(map_y~true_x)
summary(reg)
true_x <- c(5732, 4629,5199,5334,5932,6215,  5554, 874, 832,2709,3493,-942,-1765,1287,1266)
map_y <- c(168,247,210,200,160,130,166,514,518,380,335,645,703,487,490)
true_y <- c(-7114,-5692, -6164, -6676, -8297, -5785, -4468, -6008, -7236, -4990, -5335, -8514, -6538, -8574, -6844)
map_x <- c(305,418,385,351,239,414,495,404,300,464,439,218,356,216,339)
reg <- lm(map_y~true_x)
summary(reg)
foo <- list(a=1,b=2,c=3)
foo <- list(a=1,b=2,c=3)
foo$a
foo[a]
View(foo)
foo[1]
foo['a']
foo['b']
loading_map <- list('(0,100]' = 2,
'(100,200]' = 4,
'(200,300]' = 6
)
summary(lm(riot_x ~ map_x))
riot_x <- c(-2522, 487, 6414, -1418, 1553, 3593)
riot_y <- c(-7946,-6063,-8934,-9417,-9016,-8557)
map_x <- c(514,373,589,616,587,560)
map_y <- c(117,341,781,191,426,575)
summary(lm(riot_x ~ map_x))
riot_x <- c(-2522, 487, 6414, -1418, 1553, 3593)
riot_y <- c(-7946,-6063,-8934,-9417,-9016,-8557)
map_x <- c(514,373,589,616,587,560)
map_y <- c(117,341,781,191,426,575)
summary(lm(riot_x ~ map_y))
summary(lm(map_y ~ riot_x))
print(summary(lm(map_y ~ riot_x)), digits=5)
print(summary(lm(map_y ~ riot_x)), digits=2)
options(scipen = 100)
summary(lm(map_y ~ riot_x))
options(scipen = 100)
summary(lm(map_y ~ riot_x))
options(scipen = 100)
summary(lm(map_x ~ riot_y))
options(scipen = 100)
summary(lm(map_y ~ riot_x))
riot_x <- c(4629, 6169, 874, -1559, -1852, 4853)
riot_y <- c(-5692, -5334, -6008, -7036, -8655, -9387)
map_x <- c(576, 550, 593, 666, 766, 825)
map_y <- c(669, 765, 415, 243, 232, 676)
options(scipen = 100)
summary(lm(map_y ~ riot_x))
options(scipen = 100)
summary(lm(map_x ~ riot_y))
riot_x <- c(-8249, 1082, -6506, -7366, 1113, -2887)
riot_y <- c(2875, -729, 1826, 4236, -322, 456)
map_x <- c(890, 260, 775, 839, 251, 530)
map_y <- c(358, 617, 432, 255, 582, 530)
options(scipen = 100)
summary(lm(map_x ~ riot_y))
options(scipen = 100)
summary(lm(map_y ~ riot_x))
riot_x <- c(-8249, 1082, -6506, -7366, 1113, -2887, -977, -1146, -6313)
riot_y <- c(2875, -729, 1826, 4236, -322, 456, -587, 1157, 4767)
map_x <- c(890, 260, 775, 839, 251, 530, 396, 404, 755)
map_y <- c(358, 617, 432, 255, 582, 530, 605, 479, 221)
options(scipen = 100)
summary(lm(map_y ~ riot_x))
options(scipen = 100)
summary(lm(map_x ~ riot_y))
riot_x <- c(-8249, 1082, -6506, -7366, 1113, -2887, -977, -1146, -6313, 2867)
riot_y <- c(2875, -729, 1826, 4236, -322, 456, -587, 1157, 4767, -675)
map_x <- c(890, 260, 775, 839, 251, 530, 396, 404, 755, 149)
map_y <- c(358, 617, 432, 255, 582, 530, 605, 479, 221, 612)
options(scipen = 100)
summary(lm(map_x ~ riot_y))
riot_x <- c(-8249, 1082, -6506, -7366, 1113, -2887, -977, -1146, -6313, 2867, -6228)
riot_y <- c(2875, -729, 1826, 4236, -322, 456, -587, 1157, 4767, -675, 3611)
map_x <- c(890, 260, 775, 839, 251, 530, 396, 404, 755, 149, 741)
map_y <- c(358, 617, 432, 255, 582, 530, 605, 479, 221, 612, 300)
options(scipen = 100)
summary(lm(map_x ~ riot_y))
options(scipen = 100)
summary(lm(map_y ~ riot_x))
riot_x <- c(10058, 11206, 12821, 11463, 10432, 10606, 11843)
riot_y <- c(-4074, -5733, -4235, -4574, 1276, -44, 1474)
map_x <- c(617, 685, 783, 702, 633, 646, 725)
map_y <- c(213, 135, 218, 195, 496, 434, 511)
options(scipen = 100)
summary(lm(map_y ~ riot_x))
options(scipen = 100)
summary(lm(map_x ~ riot_x))
options(scipen = 100)
summary(lm(map_y ~ riot_y))
riot_x <- c(10058, 11206, 12821, 11463, 10432,  11843)
riot_y <- c(-4074, -5733, -4235, -4574, 1276,  1474)
map_x <- c(617, 685, 783, 702, 633,  725)
map_y <- c(213, 135, 218, 195, 496,  511)
options(scipen = 100)
summary(lm(map_y ~ riot_y))
riot_x <- c(10058, 11206, 12821, 11463, 10432,  11843)
riot_y <- c(-4074, -5733, -4235, -4574, 1276,  1474)
map_x <- c(617, 685, 783, 702, 633,  725)
map_y <- c(213, 135, 218, 195, 496,  511)
options(scipen = 100)
summary(lm(map_x ~ riot_x))
options(scipen = 100)
summary(lm(map_y ~ riot_y))
riot_x <- c(3227, -1504, -6158, -4846, -3484, -4934, -1703, -3247)
riot_y <- c(871, 2759, 1455, 2893, 3053, 4862, 3068, 3424)
map_x <- c(105,191, 750, 651, 567, 656, 443, 549)
map_y <- c(500, 436, 452, 351, 340, 213, 346, 322)
options(scipen = 100)
summary(lm(map_y ~ riot_y))
riot_x <- c(3227, -1504, -6158, -4846, -3484, -4934, -1703, -3247)
riot_y <- c(871, 2759, 1455, 2893, 3053, 4862, 3068, 3424)
map_x <- c(105,191, 750, 651, 567, 656, 443, 549)
map_y <- c(500, 436, 452, 351, 340, 213, 346, 322)
options(scipen = 100)
summary(lm(map_x ~ riot_y))
riot_x <- c(3227, -1504, -6158, -4846, -3484, -4934, -1703, -3247)
riot_y <- c(871, 2759, 1455, 2893, 3053, 4862, 3068, 3424)
map_x <- c(105,191, 750, 651, 567, 656, 443, 549)
map_y <- c(500, 436, 452, 351, 340, 213, 346, 322)
options(scipen = 100)
summary(lm(map_y ~ riot_y))
riot_x <- c(3227, -1504, -6158, -4846, -3484, -4934, -1703, -3247)
riot_y <- c(871, 2759, 1455, 2893, 3053, 4862, 3068, 3424)
map_x <- c(105,191, 750, 651, 567, 656, 443, 549)
map_y <- c(500, 436, 452, 351, 340, 213, 346, 322)
options(scipen = 100)
summary(lm(map_x ~ riot_x))
riot_x <- c(3227, -1504, -6158, -4846, -3484, -4934, -1703, -3247)
riot_y <- c(871, 2759, 1455, 2893, 3053, 4862, 3068, 3424)
map_x <- c(105,191, 750, 651, 567, 656, 443, 549)
map_y <- c(500, 436, 452, 351, 340, 213, 346, 322)
options(scipen = 100)
summary(lm(map_x ~ riot_x))
options(scipen = 100)
summary(lm(map_y ~ riot_y))
riot_x <- c(247, -1847, -1681, -801, -2799, 6213, 7192, 6396)
riot_y <- c(-6446, -7055, -5716, -5154, -5162, -4344, -7057, -5944)
map_x <- c(278, 96, 119, 52, 58, 489, 634, 587)
map_y <- c(239, 211, 287, 284, 314, 346, 210, 268)
options(scipen = 100)
summary(lm(map_y ~ riot_y))
summary(lm(map_x ~ riot_x))
riot_x <- c(247, -1847, -1681, -801, -2799, 6213, 7192, 6396)
riot_y <- c(-6446, -7055, -5716, -5154, -5162, -4344, -7057, -5944)
map_x <- c(278, 96, 119, 52, 58, 489, 634, 587)
map_y <- c(239, 211, 287, 284, 314, 346, 210, 268)
options(scipen = 100)
summary(lm(map_x ~ riot_x))
riot_x <- c(4629, 6169, 874,  -1559, -1852, 4853)
riot_y <- c(-5692, -5334, -6008, -7036, -8655, -9387)
map_x <- c(576, 550, 593, 666, 766, 825)
map_y <- c(669, 765, 415, 243, 232, 676)
options(scipen = 100)
summary(lm(map_x ~ riot_x))
options(scipen = 100)
summary(lm(map_y ~ riot_x))
options(scipen = 100)
summary(lm(map_y ~ riot_x))
options(scipen = 100)
summary(lm(map_y ~ riot_x))
riot_x <- c(4629, 6169, 874,  -1559, -1852, 4853)
riot_y <- c(-5692, -5334, -6008, -7036, -8655, -9387)
map_x <- c(576, 550, 593, 666, 766, 825)
map_y <- c(669, 765, 415, 243, 232, 676)
options(scipen = 100)
summary(lm(map_y ~ riot_x))
options(scipen = 100)
summary(lm(map_x ~ riot_y))
riot_x <- c(-2522, 487, 6414, -1418, 1553, 3593)
riot_y <- c(-7946, -6063, -8934, -9417, -9016, -8557)
map_x <- c(514, 373, 589, 616, 587, 560)
map_y <- c(117, 341, 781, 191, 426, 575)
options(scipen = 100)
summary(lm(map_x ~ riot_y))
summary(lm(map_y ~ riot_x))
riot_x <- c(10058, 11206, 12821, 11463, 10432, 11843)
riot_y <- c(-4074, -5733, -4235, -4574, 1276, 1474)
map_x <- c(617, 685, 783, 702, 633, 725)
map_y <- c(213, 135, 218, 195, 496, 511)
options(scipen = 100)
summary(lm(map_y ~ riot_x))
options(scipen = 100)
summary(lm(map_x ~ riot_x))
riot_x <- c(3227, -1504, -6158, -4846, -3484, -4934, -1703, -3247)
riot_y <- c(871, 2759, 1455, 2893, 3053, 4862, 3068, 3424)
map_x <- c(105, 191, 750 ,651, 567, 656, 443, 549)
map_y <- c(500, 436, 452, 351, 340, 213, 346, 322)
options(scipen = 100)
summary(lm(map_x ~ riot_x))
riot_x <- c(3227, -1504,  -4846, -3484, -4934, -1703, -3247)
riot_y <- c(871, 2759, 2893, 3053, 4862, 3068, 3424)
map_x <- c(105, 191, 651, 567, 656, 443, 549)
map_y <- c(500, 436, 351, 340, 213, 346, 322)
options(scipen = 100)
summary(lm(map_x ~ riot_x))
riot_x <- c(-6158, -6063, -4846, -4498)
riot_y <- c(1455, 2858, 2893, 3959)
map_x <- c(746, 740, 651, 638)
map_y <- c(451, 366, 351, 247)
options(scipen = 100)
summary(lm(map_x ~ riot_x))
options(scipen = 100)
summary(lm(map_y ~ riot_y))
riot_x <- c(-1681, -2799, 7192, 6396, 4757)
riot_y <- c(-5716, -5162, -7057, -5944, -4654)
map_x <- c(119, 53, 634, 586, 487)
map_y <- c(287, 319, 209, 267, 345)
options(scipen = 100)
summary(lm(map_y ~ riot_y))
summary(lm(map_x ~ riot_x))
summary(lm(map_y ~ riot_y))
riot_x <- c(-6158, -6063, -4846)
riot_y <- c(1455, 2858, 2893)
map_x <- c(746, 740, 651)
map_y <- c(451, 366, 351)
options(scipen = 100)
summary(lm(map_y ~ riot_y))
riot_x <- c(-6158, -6063, -4846, -4498)
riot_y <- c(1455, 2858, 2893, 3959)
map_x <- c(746, 740, 651, 638)
map_y <- c(451, 366, 351, 247)
options(scipen = 100)
summary(lm(map_y ~ riot_y))
riot_x <- c(-6158, -6063, -4846)
riot_y <- c(1455, 2858, 2893)
map_x <- c(746, 740, 651)
map_y <- c(451, 366, 351)
options(scipen = 100)
summary(lm(map_y ~ riot_y))
riot_x <- c(-6158, -6063, -4846, -4498, -4934)
riot_y <- c(1455, 2858, 2893, 3959, 4862)
map_x <- c(746, 740, 651, 638, 672)
map_y <- c(451, 366, 351, 247, 207)
options(scipen = 100)
summary(lm(map_y ~ riot_y))
riot_x <- c(-6158, -6063, -4846, -4934)
riot_y <- c(1455, 2858, 2893, 4862)
map_x <- c(746, 740, 651,  672)
map_y <- c(451, 366, 351,  207)
options(scipen = 100)
summary(lm(map_y ~ riot_y))
summary(lm(map_x ~ riot_x))
options(scipen = 100)
summary(lm(map_x ~ riot_x))
riot_x <- c(-6158, -6063, -4846, -4498)
riot_y <- c(1455, 2858, 2893, 3959)
map_x <- c(746, 740, 651, 638)
map_y <- c(451, 366, 351, 247)
options(scipen = 100)
summary(lm(map_x ~ riot_x))
riot_x <- c(6396, 7192, 7683, 6365)
riot_y <- c(-5944, -7057, -7082, -6577)
map_x <- c(382, 303, 304, 346)
map_y <- c(203, 138, 108, 220)
options(scipen = 100)
summary(lm(map_x ~ riot_x))
summary(lm(map_y ~ riot_x))
summary(lm(riot_y ~ map_x))
summary(lm(riot_x ~ map_x))
summary(lm(riot_y ~ map_y))
riot_x <- c(6396, 7192, 4757, -1681)
riot_y <- c(-5944, -7057, -4654, -5716)
map_x <- c(382, 303, 491, 407)
map_y <- c(203, 138, 337, 846)
options(scipen = 100)
summary(lm(riot_x ~ map_x))
summary(lm(riot_y ~ map_y))
options(scipen = 100)
summary(lm(riot_y ~ map_x))
summary(lm(riot_x ~ map_y))
options(scipen = 100)
summary(lm(map_y ~ riot_x))
summary(lm(map_x ~ riot_y))
summary(lm(map_y ~ riot_x))
summary(lm(map_y ~ riot_x))
summary(lm(map_x ~ riot_y))
rawX <- c(5501, 8289, 9156, 5955, 7542)
rawY <- c(-4876, -2848, -5762, -548, -1843)
mapX <- c(132, 282, 61, 441, 367)
mapY <- c(462, 265, 193, 437, 313)
summary(lm(mapX ~ rawY))
options(scipen = 999)
summary(lm(mapX ~ rawY))
options(scipen = 999)
summary(lm(mapY ~ rawX))
load("C:/Users/zhufe/Downloads/fredmd_description.RData")
View(fredmd_description)
fredmd_description
write.csv(fredmd_description, 'fredmd_description')
write.csv(fredmd_description, 'fredmd_description')
setwd("C:/Users/zhufe/Dropbox/Felix Zhu Honours Project/Coding/Data")
write.csv(fredmd_description, 'fredmd_description')
write.csv(fredmd_description, 'fredmd_description')
write.csv(fredmd_defs, 'fredmd_description')
write.csv(fredmd_description, 'fredmd_description.csv')
write.csv(fredmd_description, fredmd_description.csv)
write.csv(fredmd_description, 'fredmd_description.csv')
write.csv('fredmd_description.csv', fredmd_description )
setwd("C:/Users/zhufe/Dropbox/Felix Zhu Honours Project/Coding/Data")
